# name: Deploy to Snowflake

# on:
#   push:
#     paths:
#       - 'outputs/**'
#   workflow_dispatch:
 
# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v2

#       - name: Install Python
#         uses: actions/setup-python@v2.2.1
#         with:
#           python-version: 3.8.x

#       - name: Install Snowflake
#         run: |
#           pip install snowflake

#       - name: Install pandas
#         run: |
#           pip install snowflake-connector-python[pandas]

#       - name: Install sklearn
#         run: |
#           pip install scikit-learn

#       - name: Install snowflake-connector-python
#         run: |
#           pip install snowflake-connector-python

#       - name: Identify and Deploy Python Code
#         env:
#           SF_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
#           SF_USERNAME: ${{ secrets.SNOWFLAKE_USER }}
#           SF_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
#           SF_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
#           SF_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
#           SF_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}
#           SF_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
#         run: |
#           # Check out the most recent commit
#           git fetch --depth=1 origin +refs/heads/main:refs/remotes/origin/main
#           git checkout origin/main -- outputs

#           # Find the most recent Python file in the outputs directory
#           latest_file=$(find outputs -type f -name "*.py" -printf "%T@ %p\n" | sort -n | tail -1 | cut -d' ' -f2)
#           echo "Most recent file: $latest_file"
          
#           # Check if the file exists
#           if [ -f "$latest_file" ]; then
#             echo "Deploying $latest_file"
#             python "$latest_file"
#           else
#             echo "No Python file found in outputs directory."
#             exit 1
#           fi
         



name: Deploy to Snowflake

on:
  push:
    paths:
      - 'outputs/**/*.py'  # Trigger only on .py files in the outputs directory
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Python
        uses: actions/setup-python@v2.2.1
        with:
          python-version: 3.8.x

      - name: Install Snowflake
        run: |
          pip install snowflake

      - name: Install pandas
        run: |
          pip install snowflake-connector-python[pandas]

      - name: Install sklearn
        run: |
          pip install scikit-learn

      - name: Install snowflake-connector-python
        run: |
          pip install snowflake-connector-python

      - name: Identify and Deploy Python Code
        env:
          SF_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
          SF_USERNAME: ${{ secrets.SNOWFLAKE_USER }}
          SF_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          SF_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
          SF_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
          SF_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}
          SF_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
        run: |
          # Check out the most recent commit
          git fetch --depth=1 origin +refs/heads/main:refs/remotes/origin/main
          git checkout origin/main -- outputs

          # Find the most recent Python file in the outputs directory
          latest_file=$(find outputs -type f -name "*.py" -printf "%T@ %p\n" | sort -n | tail -1 | cut -d' ' -f2)
          echo "Most recent file: $latest_file"
          
          # Check if the file exists
          if [ -f "$latest_file" ]; then
            echo "Deploying $latest_file"
            python "$latest_file"
          else
            echo "No Python file found in outputs directory."
            exit 1
          fi



# name: Deploy to Snowflake

# on:
#   push:
#     paths:
#       - 'outputs/**/*.py'  # Trigger only on .py files in the outputs directory
#   workflow_dispatch:

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v2

#       - name: Install Python
#         uses: actions/setup-python@v2.2.1
#         with:
#           python-version: 3.8.x

#       - name: Install Snowflake
#         run: |
#           pip install snowflake

#       - name: Install pandas
#         run: |
#           pip install snowflake-connector-python[pandas]

#       - name: Install sklearn
#         run: |
#           pip install scikit-learn

#       - name: Install snowflake-connector-python
#         run: |
#           pip install snowflake-connector-python

#       - name: Identify and Deploy Python Code
#         id: deploy_python
#         env:
#           SF_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
#           SF_USERNAME: ${{ secrets.SNOWFLAKE_USER }}
#           SF_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
#           SF_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
#           SF_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
#           SF_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}
#           SF_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
#         run: |
#           # Check out the most recent commit
#           git fetch --depth=1 origin +refs/heads/main:refs/remotes/origin/main
#           git checkout origin/main -- outputs

#           # Find the most recent Python file in the outputs directory
#           latest_file=$(find outputs -type f -name "*.py" -printf "%T@ %p\n" | sort -n | tail -1 | cut -d' ' -f2)
#           echo "Most recent file: $latest_file"

#           # Check if the file exists and capture the output
#           if [ -f "$latest_file" ]; then
#             echo "Deploying $latest_file"
#             result=$(python "$latest_file")
#             echo "result=$result" >> $GITHUB_ENV
#           else
#             echo "No Python file found in outputs directory."
#             exit 1
#           fi

#       - name: Save result to Snowflake
#         env:
#           SF_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT }}
#           SF_USERNAME: ${{ secrets.SNOWFLAKE_USER }}
#           SF_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
#           SF_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE }}
#           SF_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE }}
#           SF_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA }}
#           SF_ROLE: ${{ secrets.SNOWFLAKE_ROLE }}
#         run: |
#           python -c "
# import os

# # Connect to Snowflake
# conn = snowflake.connector.connect(
#     user=os.getenv('SF_USERNAME'),
#     password=os.getenv('SF_PASSWORD'),
#     account=os.getenv('SF_ACCOUNT'),
#     warehouse=os.getenv('SF_WAREHOUSE'),
#     database=os.getenv('SF_DATABASE'),
#     schema=os.getenv('SF_SCHEMA'),
#     role=os.getenv('SF_ROLE')
# )

# # Assuming the result is in a format that can be converted to a DataFrame
# result = os.getenv('result')
# data = [line.split(',') for line in result.split('\n') if line]
# df = pd.DataFrame(data[1:], columns=data[0])  # Adjust if the result format is different

# # Write the DataFrame to Snowflake
# table_name = 'deploy_results'
# df.to_sql(deploy_results, con=conn, if_exists='replace', index=False)
# conn.close()
# "

