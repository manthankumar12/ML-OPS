schemaVersion: 3
meta:
  sourceVersionId: 84b54a15-5867-49e6-b0c0-4cc50c4dfb9e # DO NOT CHANGE - Hex uses this to match up project versions when reimporting the file
  description: null
  projectId: 6de9a3fd-0345-431a-a01a-73a53fef7597 # DO NOT CHANGE - Unique ID of the project from which this file was generated
  title: turnover_forecast
  timezone: null
  appTheme: SYS_PREF
  codeLanguage: PYTHON
  status: null
  categories: []
  castDecimalsDefault: true
  logicQueryCacheTimeout: null
  publishedQueryCacheTimeout: null
  hexType: PROJECT
  allowExecutionReordering: true
  prerunApp: false
  cachePublishedAppState: true
  refreshStalePublishedApp: false
  autoRerunApp: true
projectAssets:
  dataConnections: []
  envVars: []
  secrets: []
sharedAssets:
  secrets:
    - secretName: SF_ACCOUNT
    - secretName: SF_DATABASE
    - secretName: SF_PASSWORD
    - secretName: SF_ROLE
    - secretName: SF_SCHEMA
    - secretName: SF_USER
    - secretName: SF_WAREHOUSE
  vcsPackages: []
  dataConnections:
    - dataConnectionId: 4391debb-0cd6-494c-bfa2-167e8ad6c4a0 # SNOWFLAKE_TRIAL (snowflake)
    - dataConnectionId: cc4f7aef-f3dc-4259-b8a2-bd93d16d4279 # [Demo] Hex Public Data (snowflake)
  externalFileIntegrations: []
cells:
  - cellType: CODE
    cellId: e2f5b8f5-5daf-4cd2-9782-763727d86d7a # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      source: |
        import snowflake.connector
        import pandas as pd
        from sklearn.ensemble import IsolationForest
        from datetime import datetime
        import sys

        def create_snowflake_table(conn):
            try:
                cur = conn.cursor()

                # Define Snowflake SQL statements to create table
                create_table_sql = f"""
                    CREATE TABLE IF NOT EXISTS model_results (
                        date TIMESTAMP_NTZ,
                        net_turnover NUMBER,
                        label BOOLEAN
                    )
                """

                # Execute SQL statements
                cur.execute(create_table_sql)

                # Commit the transaction
                conn.commit()

                # Close cursor
                cur.close()

                print("Table created successfully.")
            except Exception as e:
                print(f"Error occurred while creating Snowflake table: {str(e)}")

        def insert_results_into_snowflake(conn, df):
            try:
                cur = conn.cursor()

                # Insert data into the Snowflake table
                for index, row in df.iterrows():
                    insert_sql = f"""
                        INSERT INTO model_results (date, net_turnover, label) VALUES (%s, %s, %s)
                    """
                    cur.execute(insert_sql, (row["date"], row["net_turnover"], row["label"]))

                # Commit the transaction
                conn.commit()

                # Close cursor
                cur.close()

                print("Data inserted successfully.")
            except Exception as e:
                print(f"Error occurred while inserting data into Snowflake table: {str(e)}")

        def main():
            conn_params = {
                "user": "Manthankumar",
                "password": "Ranamanthan@123",
                "account": "wyb94529",
                "warehouse": "COMPUTE_WH",
                "role": "ACCOUNTADMIN",
                "database": "SNOWLENS",
                "schema": "demo",
            }

            # Connect to Snowflake and execute the query
            try:
                conn = snowflake.connector.connect(
                    user=conn_params["user"],
                    password=conn_params["password"],
                    account=conn_params["account"],
                    warehouse=conn_params["warehouse"],
                    role=conn_params["role"],
                    database=conn_params["database"],
                    schema=conn_params["schema"],
                )
                cur = conn.cursor()
                query = "SELECT * FROM turnover"
                cur.execute(query)

                df = cur.fetch_pandas_all()


                # Specify the column used for model fitting
                feature_column = "NET_TURNOVER"
                model = IsolationForest(contamination=0.1)
                model.fit(df[[feature_column]])

                df["label"] = model.predict(df[[feature_column]])

                df["label"] = df["label"].apply(lambda x: 1 if x == -1 else 0)

                cur.close()

                print(df)

                # Call the function to create the Snowflake table
                create_snowflake_table(conn)

                # Call the function to insert results into the Snowflake table
                insert_results_into_snowflake(conn, df)

                # Close the connection
                conn.close()

            except Exception as e:
                print(f"Error occurred: {str(e)}")
                sys.exit(1)

        if __name__ == "__main__":
            main()
  - cellType: CODE
    cellId: a29804bb-55cf-4cba-9a6a-e5788ad530b3 # DO NOT CHANGE - Hex uses this to match up cells when reimporting the file, and detect any changes to existing cells
    cellLabel: null
    config:
      source: |
        import snowflake.connector
        import pandas as pd
        from sklearn.ensemble import IsolationForest
        from datetime import datetime
        import sys

        def create_snowflake_table(conn):
            try:
                cur = conn.cursor()

                # Define Snowflake SQL statements to create table
                create_table_sql = f"""
                    CREATE TABLE IF NOT EXISTS model_results (
                        date TIMESTAMP_NTZ,
                        net_turnover NUMBER,
                        label BOOLEAN
                    )
                """

                # Execute SQL statements
                cur.execute(create_table_sql)

                # Commit the transaction
                conn.commit()

                # Close cursor
                cur.close()

                print("Table created successfully.")
            except Exception as e:
                print(f"Error occurred while creating Snowflake table: {str(e)}")

        def insert_results_into_snowflake(conn, df):
            try:
                cur = conn.cursor()

                # Insert data into the Snowflake table
                for index, row in df.iterrows():
                    insert_sql = f"""
                        INSERT INTO model_results (date, net_turnover, label) VALUES (%s, %s, %s)
                    """
                    cur.execute(insert_sql, (row["date"], row["net_turnover"], row["label"]))

                # Commit the transaction
                conn.commit()

                # Close cursor
                cur.close()

                print("Data inserted successfully.")
            except Exception as e:
                print(f"Error occurred while inserting data into Snowflake table: {str(e)}")

        def main():
            conn_params = {
                "user": "Manthankumar",
                "password": "Ranamanthan@123",
                "account": "wyb94529",
                "warehouse": "COMPUTE_WH",
                "role": "ACCOUNTADMIN",
                "database": "SNOWLENS",
                "schema": "demo",
            }

            # Connect to Snowflake and execute the query
            try:
                conn = snowflake.connector.connect(
                    user=conn_params["user"],
                    password=conn_params["password"],
                    account=conn_params["account"],
                    warehouse=conn_params["warehouse"],
                    role=conn_params["role"],
                    database=conn_params["database"],
                    schema=conn_params["schema"],
                )
                cur = conn.cursor()
                query = "SELECT * FROM turnover"
                cur.execute(query)

                df = cur.fetch_pandas_all()

                # Add a 'date' column with the current timestamp
                df["date"] = datetime.now()

                # Specify the column used for model fitting
                feature_column = "NET_TURNOVER"
                model = IsolationForest(contamination=0.1)
                model.fit(df[[feature_column]])

                df["label"] = model.predict(df[[feature_column]])

                df["label"] = df["label"].apply(lambda x: 1 if x == -1 else 0)

                cur.close()

                print(df)

                # Call the function to create the Snowflake table
                create_snowflake_table(conn)

                # Call the function to insert results into the Snowflake table
                insert_results_into_snowflake(conn, df)

                # Close the connection
                conn.close()

            except Exception as e:
                print(f"Error occurred: {str(e)}")
                sys.exit(1)

        if __name__ == "__main__":
            main()
appLayout:
  visibleMetadataFields:
    - NAME
    - DESCRIPTION
    - AUTHOR
    - LAST_EDITED
    - LAST_RUN
    - CATEGORIES
    - STATUS
    - TABLE_OF_CONTENTS
  fullWidth: false
  tabs:
    - name: Tab 1
      rows:
        - columns:
            - start: 0
              end: 120
              elements:
                - showSource: false
                  hideOutput: false
                  type: CELL
                  cellId: a29804bb-55cf-4cba-9a6a-e5788ad530b3
                  sharedFilterId: null
                  height: null
                  showLabel: true
sharedFilters: []
